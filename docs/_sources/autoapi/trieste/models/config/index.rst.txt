:py:mod:`trieste.models.config`
===============================

.. py:module:: trieste.models.config

.. autoapi-nested-parse::

   This module contains registry for supported models and config related classes and functions.
   Configs allow expert users to build model as a dictionary of model and optimizer arguments,
   rather than working with interfaces.



Module Contents
---------------

.. py:class:: ModelRegistry

   This is a registry of all supported models with their corresponding interfaces and optimizers.
   A single entry per model is maintained, if same model is registered again it will overwrite the
   previous entry. Registry is primarily used by :class:`ModelConfig` and :func:`create_model` to
   facilitate building models by specifying a simple dictionary of model and optimizer arguments.

   Note that you do not need to register your custom model if you will provide an instance of
   :class:`~trieste.models.TrainableProbabilisticModel` directly to the
   :class:`~trieste.BayesianOptimizer`. Registering is required if you intend to build your custom
   model as a dictionary of arguments for the interface and the optimizer, or as a
   :class:`ModelConfig`.

   .. py:method:: get_interface(cls, model_type: Type[Any]) -> Type[trieste.models.interfaces.TrainableProbabilisticModel]
      :classmethod:

      Get a Trieste model interface for a given model type.

      :param model_type: The model type.
      :return: The interface which builds a model.


   .. py:method:: get_optimizer(cls, model_type: Type[Any]) -> Type[trieste.models.optimizer.Optimizer]
      :classmethod:

      Get a Trieste model optimizer for a given model type.

      :param model_type: The model type.
      :return: The optimizer to be used with the model type.


   .. py:method:: register_model(cls, model_type: Type[Any], interface_type: Type[trieste.models.interfaces.TrainableProbabilisticModel], optimizer_type: Type[trieste.models.optimizer.Optimizer]) -> None
      :classmethod:

      Register a new model type. Note that this will overwrite a registry
      entry if the model has already been registered.

      :param model_type: The model type.
      :param interface_type: The interface to be used with the model type.
      :param optimizer_type: The optimizer to be used with the model type.


   .. py:method:: get_registered_models(cls) -> Iterable[Any]
      :classmethod:

      Provides a generator with all supported model types.



.. py:class:: ModelConfig

   This class is a specification for building a
   :class:`~trieste.models.TrainableProbabilisticModel`. It is not meant to be used by itself,
   it implements methods that facilitate building a Trieste model as a dictionary of model and
   optimizer arguments with :func:`create_model`.

   .. py:attribute:: model
      :annotation: :Any

      The low-level model to pass to the :class:`~trieste.models.TrainableProbabilisticModel`
      interface registered with the `model` via :class:`ModelRegistry`. The model has to be one of
      the supported models, that is, registered via :class:`ModelRegistry`. We use type `Any` here as
      this can be either a model that is supported by default (for example, GPflow- or GPflux-based
      models) or a user-defined model that has been registered.


   .. py:attribute:: model_args
      :annotation: :dict[str, Any]

      The keyword arguments to pass to the model interface
      :class:`~trieste.models.TrainableProbabilisticModel` registered with the `model` via
      :class:`ModelRegistry`.


   .. py:attribute:: optimizer
      :annotation: :Any

      The low-level optimizer to pass to the :class:`~trieste.models.Optimizer` interface
      registered with the `model` via :class:`ModelRegistry`, with which to train the model (by
      minimizing its loss function).


   .. py:attribute:: optimizer_args
      :annotation: :dict[str, Any]

      The keyword arguments to pass to the optimizer interface :class:`~trieste.models.Optimizer`
      registered with the `model` via :class:`ModelRegistry`.


   .. py:method:: build_model(self) -> trieste.models.interfaces.TrainableProbabilisticModel

      Builds a Trieste model from the model and optimizer configuration.



.. py:data:: ModelDictConfig
   

   Type alias for a config type specification of a model. 


.. py:data:: ModelSpec
   

   Type alias for any type that can be used to fully specify a model. 


.. py:function:: create_model(config: ModelSpec) -> trieste.models.interfaces.TrainableProbabilisticModel

   Build a model in a flexible way by providing a dictionary of model and optimizer arguments, a
   :class:`ModelConfig`, or a :class:`~trieste.models.TrainableProbabilisticModel`. This function
   is primarily used by :class:`~trieste.BayesianOptimizer` to build a model.

   :param config: A configuration for building a Trieste model.
   :return: A Trieste model built according to ``config``.


